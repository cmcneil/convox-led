// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convox_led.proto

package org.convox.lights;

public final class ConvoxLed {
  private ConvoxLed() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ConvoxLightConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.convox.lights.ConvoxLightConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    java.util.List<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color> 
        getColorsList();
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    org.convox.lights.ConvoxLed.ConvoxLightConfig.Color getColors(int index);
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    int getColorsCount();
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    java.util.List<? extends org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder> 
        getColorsOrBuilderList();
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder getColorsOrBuilder(
        int index);

    /**
     * <code>optional uint32 period = 2;</code>
     *
     * <pre>
     * The time (in milliseconds) it takes for a light to move from one color to the next.
     * A value of 0 means that the lights never change.
     * </pre>
     */
    boolean hasPeriod();
    /**
     * <code>optional uint32 period = 2;</code>
     *
     * <pre>
     * The time (in milliseconds) it takes for a light to move from one color to the next.
     * A value of 0 means that the lights never change.
     * </pre>
     */
    int getPeriod();

    /**
     * <code>optional uint32 transition_steps = 3;</code>
     *
     * <pre>
     * The number of steps it takes for a light to move from one color to the next.
     * You can think of this like frame rate. A value of 0 means that it will try to be as
     * smooth as possible. (as high of framerate as the hardware permits.
     * </pre>
     */
    boolean hasTransitionSteps();
    /**
     * <code>optional uint32 transition_steps = 3;</code>
     *
     * <pre>
     * The number of steps it takes for a light to move from one color to the next.
     * You can think of this like frame rate. A value of 0 means that it will try to be as
     * smooth as possible. (as high of framerate as the hardware permits.
     * </pre>
     */
    int getTransitionSteps();

    /**
     * <code>optional float circle_compression = 4 [default = 1];</code>
     *
     * <pre>
     * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
     * occupy at any given time.
     * </pre>
     */
    boolean hasCircleCompression();
    /**
     * <code>optional float circle_compression = 4 [default = 1];</code>
     *
     * <pre>
     * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
     * occupy at any given time.
     * </pre>
     */
    float getCircleCompression();
  }
  /**
   * Protobuf type {@code org.convox.lights.ConvoxLightConfig}
   *
   * <pre>
   * Next Id: 5
   * </pre>
   */
  public static final class ConvoxLightConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.convox.lights.ConvoxLightConfig)
      ConvoxLightConfigOrBuilder {
    // Use ConvoxLightConfig.newBuilder() to construct.
    private ConvoxLightConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConvoxLightConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConvoxLightConfig defaultInstance;
    public static ConvoxLightConfig getDefaultInstance() {
      return defaultInstance;
    }

    public ConvoxLightConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConvoxLightConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                colors_ = new java.util.ArrayList<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color>();
                mutable_bitField0_ |= 0x00000001;
              }
              colors_.add(input.readMessage(org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              period_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              transitionSteps_ = input.readUInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000004;
              circleCompression_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.convox.lights.ConvoxLed.ConvoxLightConfig.class, org.convox.lights.ConvoxLed.ConvoxLightConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<ConvoxLightConfig> PARSER =
        new com.google.protobuf.AbstractParser<ConvoxLightConfig>() {
      public ConvoxLightConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConvoxLightConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConvoxLightConfig> getParserForType() {
      return PARSER;
    }

    public interface ColorOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.convox.lights.ConvoxLightConfig.Color)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
       */
      boolean hasColorSpace();
      /**
       * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
       */
      org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace getColorSpace();

      /**
       * <code>repeated uint32 coordinates = 2;</code>
       */
      java.util.List<java.lang.Integer> getCoordinatesList();
      /**
       * <code>repeated uint32 coordinates = 2;</code>
       */
      int getCoordinatesCount();
      /**
       * <code>repeated uint32 coordinates = 2;</code>
       */
      int getCoordinates(int index);
    }
    /**
     * Protobuf type {@code org.convox.lights.ConvoxLightConfig.Color}
     */
    public static final class Color extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.convox.lights.ConvoxLightConfig.Color)
        ColorOrBuilder {
      // Use Color.newBuilder() to construct.
      private Color(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Color(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Color defaultInstance;
      public static Color getDefaultInstance() {
        return defaultInstance;
      }

      public Color getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Color(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace value = org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  colorSpace_ = value;
                }
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  coordinates_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                coordinates_.add(input.readUInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  coordinates_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  coordinates_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            coordinates_ = java.util.Collections.unmodifiableList(coordinates_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_Color_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_Color_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.class, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder.class);
      }

      public static com.google.protobuf.Parser<Color> PARSER =
          new com.google.protobuf.AbstractParser<Color>() {
        public Color parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Color(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Color> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code org.convox.lights.ConvoxLightConfig.Color.ColorSpace}
       */
      public enum ColorSpace
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>RGB = 1;</code>
         */
        RGB(0, 1),
        /**
         * <code>HSV = 2;</code>
         */
        HSV(1, 2),
        ;

        /**
         * <code>RGB = 1;</code>
         */
        public static final int RGB_VALUE = 1;
        /**
         * <code>HSV = 2;</code>
         */
        public static final int HSV_VALUE = 2;


        public final int getNumber() { return value; }

        public static ColorSpace valueOf(int value) {
          switch (value) {
            case 1: return RGB;
            case 2: return HSV;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ColorSpace>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<ColorSpace>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ColorSpace>() {
                public ColorSpace findValueByNumber(int number) {
                  return ColorSpace.valueOf(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.getDescriptor().getEnumTypes().get(0);
        }

        private static final ColorSpace[] VALUES = values();

        public static ColorSpace valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private ColorSpace(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.convox.lights.ConvoxLightConfig.Color.ColorSpace)
      }

      private int bitField0_;
      public static final int COLOR_SPACE_FIELD_NUMBER = 1;
      private org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace colorSpace_;
      /**
       * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
       */
      public boolean hasColorSpace() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
       */
      public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace getColorSpace() {
        return colorSpace_;
      }

      public static final int COORDINATES_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> coordinates_;
      /**
       * <code>repeated uint32 coordinates = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getCoordinatesList() {
        return coordinates_;
      }
      /**
       * <code>repeated uint32 coordinates = 2;</code>
       */
      public int getCoordinatesCount() {
        return coordinates_.size();
      }
      /**
       * <code>repeated uint32 coordinates = 2;</code>
       */
      public int getCoordinates(int index) {
        return coordinates_.get(index);
      }

      private void initFields() {
        colorSpace_ = org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace.RGB;
        coordinates_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, colorSpace_.getNumber());
        }
        for (int i = 0; i < coordinates_.size(); i++) {
          output.writeUInt32(2, coordinates_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, colorSpace_.getNumber());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < coordinates_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(coordinates_.get(i));
          }
          size += dataSize;
          size += 1 * getCoordinatesList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.convox.lights.ConvoxLed.ConvoxLightConfig.Color prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.convox.lights.ConvoxLightConfig.Color}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.convox.lights.ConvoxLightConfig.Color)
          org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_Color_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_Color_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.class, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder.class);
        }

        // Construct using org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          colorSpace_ = org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace.RGB;
          bitField0_ = (bitField0_ & ~0x00000001);
          coordinates_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_Color_descriptor;
        }

        public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color getDefaultInstanceForType() {
          return org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.getDefaultInstance();
        }

        public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color build() {
          org.convox.lights.ConvoxLed.ConvoxLightConfig.Color result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color buildPartial() {
          org.convox.lights.ConvoxLed.ConvoxLightConfig.Color result = new org.convox.lights.ConvoxLed.ConvoxLightConfig.Color(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.colorSpace_ = colorSpace_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            coordinates_ = java.util.Collections.unmodifiableList(coordinates_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.coordinates_ = coordinates_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.convox.lights.ConvoxLed.ConvoxLightConfig.Color) {
            return mergeFrom((org.convox.lights.ConvoxLed.ConvoxLightConfig.Color)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.convox.lights.ConvoxLed.ConvoxLightConfig.Color other) {
          if (other == org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.getDefaultInstance()) return this;
          if (other.hasColorSpace()) {
            setColorSpace(other.getColorSpace());
          }
          if (!other.coordinates_.isEmpty()) {
            if (coordinates_.isEmpty()) {
              coordinates_ = other.coordinates_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCoordinatesIsMutable();
              coordinates_.addAll(other.coordinates_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.convox.lights.ConvoxLed.ConvoxLightConfig.Color parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.convox.lights.ConvoxLed.ConvoxLightConfig.Color) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace colorSpace_ = org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace.RGB;
        /**
         * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
         */
        public boolean hasColorSpace() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
         */
        public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace getColorSpace() {
          return colorSpace_;
        }
        /**
         * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
         */
        public Builder setColorSpace(org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          colorSpace_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .org.convox.lights.ConvoxLightConfig.Color.ColorSpace color_space = 1 [default = RGB];</code>
         */
        public Builder clearColorSpace() {
          bitField0_ = (bitField0_ & ~0x00000001);
          colorSpace_ = org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.ColorSpace.RGB;
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Integer> coordinates_ = java.util.Collections.emptyList();
        private void ensureCoordinatesIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            coordinates_ = new java.util.ArrayList<java.lang.Integer>(coordinates_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public java.util.List<java.lang.Integer>
            getCoordinatesList() {
          return java.util.Collections.unmodifiableList(coordinates_);
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public int getCoordinatesCount() {
          return coordinates_.size();
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public int getCoordinates(int index) {
          return coordinates_.get(index);
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public Builder setCoordinates(
            int index, int value) {
          ensureCoordinatesIsMutable();
          coordinates_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public Builder addCoordinates(int value) {
          ensureCoordinatesIsMutable();
          coordinates_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public Builder addAllCoordinates(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureCoordinatesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, coordinates_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 coordinates = 2;</code>
         */
        public Builder clearCoordinates() {
          coordinates_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.convox.lights.ConvoxLightConfig.Color)
      }

      static {
        defaultInstance = new Color(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.convox.lights.ConvoxLightConfig.Color)
    }

    private int bitField0_;
    public static final int COLORS_FIELD_NUMBER = 1;
    private java.util.List<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color> colors_;
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    public java.util.List<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color> getColorsList() {
      return colors_;
    }
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    public java.util.List<? extends org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder> 
        getColorsOrBuilderList() {
      return colors_;
    }
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    public int getColorsCount() {
      return colors_.size();
    }
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color getColors(int index) {
      return colors_.get(index);
    }
    /**
     * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
     */
    public org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder getColorsOrBuilder(
        int index) {
      return colors_.get(index);
    }

    public static final int PERIOD_FIELD_NUMBER = 2;
    private int period_;
    /**
     * <code>optional uint32 period = 2;</code>
     *
     * <pre>
     * The time (in milliseconds) it takes for a light to move from one color to the next.
     * A value of 0 means that the lights never change.
     * </pre>
     */
    public boolean hasPeriod() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 period = 2;</code>
     *
     * <pre>
     * The time (in milliseconds) it takes for a light to move from one color to the next.
     * A value of 0 means that the lights never change.
     * </pre>
     */
    public int getPeriod() {
      return period_;
    }

    public static final int TRANSITION_STEPS_FIELD_NUMBER = 3;
    private int transitionSteps_;
    /**
     * <code>optional uint32 transition_steps = 3;</code>
     *
     * <pre>
     * The number of steps it takes for a light to move from one color to the next.
     * You can think of this like frame rate. A value of 0 means that it will try to be as
     * smooth as possible. (as high of framerate as the hardware permits.
     * </pre>
     */
    public boolean hasTransitionSteps() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 transition_steps = 3;</code>
     *
     * <pre>
     * The number of steps it takes for a light to move from one color to the next.
     * You can think of this like frame rate. A value of 0 means that it will try to be as
     * smooth as possible. (as high of framerate as the hardware permits.
     * </pre>
     */
    public int getTransitionSteps() {
      return transitionSteps_;
    }

    public static final int CIRCLE_COMPRESSION_FIELD_NUMBER = 4;
    private float circleCompression_;
    /**
     * <code>optional float circle_compression = 4 [default = 1];</code>
     *
     * <pre>
     * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
     * occupy at any given time.
     * </pre>
     */
    public boolean hasCircleCompression() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float circle_compression = 4 [default = 1];</code>
     *
     * <pre>
     * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
     * occupy at any given time.
     * </pre>
     */
    public float getCircleCompression() {
      return circleCompression_;
    }

    private void initFields() {
      colors_ = java.util.Collections.emptyList();
      period_ = 0;
      transitionSteps_ = 0;
      circleCompression_ = 1F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < colors_.size(); i++) {
        output.writeMessage(1, colors_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(2, period_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(3, transitionSteps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(4, circleCompression_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < colors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, colors_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, period_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, transitionSteps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, circleCompression_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.convox.lights.ConvoxLed.ConvoxLightConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.convox.lights.ConvoxLed.ConvoxLightConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.convox.lights.ConvoxLightConfig}
     *
     * <pre>
     * Next Id: 5
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.convox.lights.ConvoxLightConfig)
        org.convox.lights.ConvoxLed.ConvoxLightConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.convox.lights.ConvoxLed.ConvoxLightConfig.class, org.convox.lights.ConvoxLed.ConvoxLightConfig.Builder.class);
      }

      // Construct using org.convox.lights.ConvoxLed.ConvoxLightConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getColorsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (colorsBuilder_ == null) {
          colors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          colorsBuilder_.clear();
        }
        period_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        transitionSteps_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        circleCompression_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.convox.lights.ConvoxLed.internal_static_org_convox_lights_ConvoxLightConfig_descriptor;
      }

      public org.convox.lights.ConvoxLed.ConvoxLightConfig getDefaultInstanceForType() {
        return org.convox.lights.ConvoxLed.ConvoxLightConfig.getDefaultInstance();
      }

      public org.convox.lights.ConvoxLed.ConvoxLightConfig build() {
        org.convox.lights.ConvoxLed.ConvoxLightConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.convox.lights.ConvoxLed.ConvoxLightConfig buildPartial() {
        org.convox.lights.ConvoxLed.ConvoxLightConfig result = new org.convox.lights.ConvoxLed.ConvoxLightConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (colorsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            colors_ = java.util.Collections.unmodifiableList(colors_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.colors_ = colors_;
        } else {
          result.colors_ = colorsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.period_ = period_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.transitionSteps_ = transitionSteps_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.circleCompression_ = circleCompression_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.convox.lights.ConvoxLed.ConvoxLightConfig) {
          return mergeFrom((org.convox.lights.ConvoxLed.ConvoxLightConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.convox.lights.ConvoxLed.ConvoxLightConfig other) {
        if (other == org.convox.lights.ConvoxLed.ConvoxLightConfig.getDefaultInstance()) return this;
        if (colorsBuilder_ == null) {
          if (!other.colors_.isEmpty()) {
            if (colors_.isEmpty()) {
              colors_ = other.colors_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureColorsIsMutable();
              colors_.addAll(other.colors_);
            }
            onChanged();
          }
        } else {
          if (!other.colors_.isEmpty()) {
            if (colorsBuilder_.isEmpty()) {
              colorsBuilder_.dispose();
              colorsBuilder_ = null;
              colors_ = other.colors_;
              bitField0_ = (bitField0_ & ~0x00000001);
              colorsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getColorsFieldBuilder() : null;
            } else {
              colorsBuilder_.addAllMessages(other.colors_);
            }
          }
        }
        if (other.hasPeriod()) {
          setPeriod(other.getPeriod());
        }
        if (other.hasTransitionSteps()) {
          setTransitionSteps(other.getTransitionSteps());
        }
        if (other.hasCircleCompression()) {
          setCircleCompression(other.getCircleCompression());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.convox.lights.ConvoxLed.ConvoxLightConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.convox.lights.ConvoxLed.ConvoxLightConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color> colors_ =
        java.util.Collections.emptyList();
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          colors_ = new java.util.ArrayList<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color>(colors_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.convox.lights.ConvoxLed.ConvoxLightConfig.Color, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder, org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder> colorsBuilder_;

      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public java.util.List<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color> getColorsList() {
        if (colorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(colors_);
        } else {
          return colorsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public int getColorsCount() {
        if (colorsBuilder_ == null) {
          return colors_.size();
        } else {
          return colorsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color getColors(int index) {
        if (colorsBuilder_ == null) {
          return colors_.get(index);
        } else {
          return colorsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder setColors(
          int index, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color value) {
        if (colorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColorsIsMutable();
          colors_.set(index, value);
          onChanged();
        } else {
          colorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder setColors(
          int index, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder builderForValue) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.set(index, builderForValue.build());
          onChanged();
        } else {
          colorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder addColors(org.convox.lights.ConvoxLed.ConvoxLightConfig.Color value) {
        if (colorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColorsIsMutable();
          colors_.add(value);
          onChanged();
        } else {
          colorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder addColors(
          int index, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color value) {
        if (colorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColorsIsMutable();
          colors_.add(index, value);
          onChanged();
        } else {
          colorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder addColors(
          org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder builderForValue) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.add(builderForValue.build());
          onChanged();
        } else {
          colorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder addColors(
          int index, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder builderForValue) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.add(index, builderForValue.build());
          onChanged();
        } else {
          colorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder addAllColors(
          java.lang.Iterable<? extends org.convox.lights.ConvoxLed.ConvoxLightConfig.Color> values) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, colors_);
          onChanged();
        } else {
          colorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder clearColors() {
        if (colorsBuilder_ == null) {
          colors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          colorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public Builder removeColors(int index) {
        if (colorsBuilder_ == null) {
          ensureColorsIsMutable();
          colors_.remove(index);
          onChanged();
        } else {
          colorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder getColorsBuilder(
          int index) {
        return getColorsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder getColorsOrBuilder(
          int index) {
        if (colorsBuilder_ == null) {
          return colors_.get(index);  } else {
          return colorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public java.util.List<? extends org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder> 
           getColorsOrBuilderList() {
        if (colorsBuilder_ != null) {
          return colorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(colors_);
        }
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder addColorsBuilder() {
        return getColorsFieldBuilder().addBuilder(
            org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.getDefaultInstance());
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder addColorsBuilder(
          int index) {
        return getColorsFieldBuilder().addBuilder(
            index, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.getDefaultInstance());
      }
      /**
       * <code>repeated .org.convox.lights.ConvoxLightConfig.Color colors = 1;</code>
       */
      public java.util.List<org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder> 
           getColorsBuilderList() {
        return getColorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.convox.lights.ConvoxLed.ConvoxLightConfig.Color, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder, org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder> 
          getColorsFieldBuilder() {
        if (colorsBuilder_ == null) {
          colorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.convox.lights.ConvoxLed.ConvoxLightConfig.Color, org.convox.lights.ConvoxLed.ConvoxLightConfig.Color.Builder, org.convox.lights.ConvoxLed.ConvoxLightConfig.ColorOrBuilder>(
                  colors_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          colors_ = null;
        }
        return colorsBuilder_;
      }

      private int period_ ;
      /**
       * <code>optional uint32 period = 2;</code>
       *
       * <pre>
       * The time (in milliseconds) it takes for a light to move from one color to the next.
       * A value of 0 means that the lights never change.
       * </pre>
       */
      public boolean hasPeriod() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 period = 2;</code>
       *
       * <pre>
       * The time (in milliseconds) it takes for a light to move from one color to the next.
       * A value of 0 means that the lights never change.
       * </pre>
       */
      public int getPeriod() {
        return period_;
      }
      /**
       * <code>optional uint32 period = 2;</code>
       *
       * <pre>
       * The time (in milliseconds) it takes for a light to move from one color to the next.
       * A value of 0 means that the lights never change.
       * </pre>
       */
      public Builder setPeriod(int value) {
        bitField0_ |= 0x00000002;
        period_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 period = 2;</code>
       *
       * <pre>
       * The time (in milliseconds) it takes for a light to move from one color to the next.
       * A value of 0 means that the lights never change.
       * </pre>
       */
      public Builder clearPeriod() {
        bitField0_ = (bitField0_ & ~0x00000002);
        period_ = 0;
        onChanged();
        return this;
      }

      private int transitionSteps_ ;
      /**
       * <code>optional uint32 transition_steps = 3;</code>
       *
       * <pre>
       * The number of steps it takes for a light to move from one color to the next.
       * You can think of this like frame rate. A value of 0 means that it will try to be as
       * smooth as possible. (as high of framerate as the hardware permits.
       * </pre>
       */
      public boolean hasTransitionSteps() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 transition_steps = 3;</code>
       *
       * <pre>
       * The number of steps it takes for a light to move from one color to the next.
       * You can think of this like frame rate. A value of 0 means that it will try to be as
       * smooth as possible. (as high of framerate as the hardware permits.
       * </pre>
       */
      public int getTransitionSteps() {
        return transitionSteps_;
      }
      /**
       * <code>optional uint32 transition_steps = 3;</code>
       *
       * <pre>
       * The number of steps it takes for a light to move from one color to the next.
       * You can think of this like frame rate. A value of 0 means that it will try to be as
       * smooth as possible. (as high of framerate as the hardware permits.
       * </pre>
       */
      public Builder setTransitionSteps(int value) {
        bitField0_ |= 0x00000004;
        transitionSteps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 transition_steps = 3;</code>
       *
       * <pre>
       * The number of steps it takes for a light to move from one color to the next.
       * You can think of this like frame rate. A value of 0 means that it will try to be as
       * smooth as possible. (as high of framerate as the hardware permits.
       * </pre>
       */
      public Builder clearTransitionSteps() {
        bitField0_ = (bitField0_ & ~0x00000004);
        transitionSteps_ = 0;
        onChanged();
        return this;
      }

      private float circleCompression_ = 1F;
      /**
       * <code>optional float circle_compression = 4 [default = 1];</code>
       *
       * <pre>
       * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
       * occupy at any given time.
       * </pre>
       */
      public boolean hasCircleCompression() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float circle_compression = 4 [default = 1];</code>
       *
       * <pre>
       * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
       * occupy at any given time.
       * </pre>
       */
      public float getCircleCompression() {
        return circleCompression_;
      }
      /**
       * <code>optional float circle_compression = 4 [default = 1];</code>
       *
       * <pre>
       * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
       * occupy at any given time.
       * </pre>
       */
      public Builder setCircleCompression(float value) {
        bitField0_ |= 0x00000008;
        circleCompression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float circle_compression = 4 [default = 1];</code>
       *
       * <pre>
       * How much of the color wheel (wheel interpolated from evenly spaced colors) do the lights
       * occupy at any given time.
       * </pre>
       */
      public Builder clearCircleCompression() {
        bitField0_ = (bitField0_ & ~0x00000008);
        circleCompression_ = 1F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.convox.lights.ConvoxLightConfig)
    }

    static {
      defaultInstance = new ConvoxLightConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.convox.lights.ConvoxLightConfig)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_convox_lights_ConvoxLightConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_convox_lights_ConvoxLightConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_convox_lights_ConvoxLightConfig_Color_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_convox_lights_ConvoxLightConfig_Color_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020convox_led.proto\022\021org.convox.lights\"\250\002" +
      "\n\021ConvoxLightConfig\022:\n\006colors\030\001 \003(\0132*.or" +
      "g.convox.lights.ConvoxLightConfig.Color\022" +
      "\016\n\006period\030\002 \001(\r\022\030\n\020transition_steps\030\003 \001(" +
      "\r\022\035\n\022circle_compression\030\004 \001(\002:\0011\032\215\001\n\005Col" +
      "or\022O\n\013color_space\030\001 \001(\01625.org.convox.lig" +
      "hts.ConvoxLightConfig.Color.ColorSpace:\003" +
      "RGB\022\023\n\013coordinates\030\002 \003(\r\"\036\n\nColorSpace\022\007" +
      "\n\003RGB\020\001\022\007\n\003HSV\020\002B\036\n\021org.convox.lightsB\tC" +
      "onvoxLed"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_org_convox_lights_ConvoxLightConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_convox_lights_ConvoxLightConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_convox_lights_ConvoxLightConfig_descriptor,
        new java.lang.String[] { "Colors", "Period", "TransitionSteps", "CircleCompression", });
    internal_static_org_convox_lights_ConvoxLightConfig_Color_descriptor =
      internal_static_org_convox_lights_ConvoxLightConfig_descriptor.getNestedTypes().get(0);
    internal_static_org_convox_lights_ConvoxLightConfig_Color_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_convox_lights_ConvoxLightConfig_Color_descriptor,
        new java.lang.String[] { "ColorSpace", "Coordinates", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
